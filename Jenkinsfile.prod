def podYaml = """
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: jenkins-pipeline-id-prod
spec:
  containers:
    - name: docker-id-prod
      image: docker:latest
      securityContext:
        privileged: true
      resources:
        requests:
          ephemeral-storage: "500Mi"
        limits:
          ephemeral-storage: "2Gi"
"""

podTemplate(yaml: podYaml) {
    
    node(POD_LABEL) {

        env.GITHUB_CREDENTIALS_ID = 'github-credentials-id' // ID для GitHub в Jenkins
        env.GHCR_CREDENTIALS_ID = 'ghcr-credentials-id'     // ID для GHCR в Jenkins
        env.IMAGE_NAME = 'ghcr.io/frolovinr/swagger-gateway'
        env.REPO_URL = 'https://github.com/frolovInR/gateway.git'
        env.DOCKER_FILE = 'Dockerfile'
        env.BRANCH_NAME = '*/master'
        env.REPORTS_DIR = "reports"



        stage('Get build time') {

            container('docker-id-prod'){

                script {
                    env.BUILD_TAG = "${env.BUILD_TIMESTAMP}"
                }

            }
            
        }

        stage('Checkout') {

            container('docker-id-prod'){

                script {
                withCredentials([usernamePassword(credentialsId: env.GITHUB_CREDENTIALS_ID, usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]) {
                        sh """
                        git config --global credential.helper store
                        echo "https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com" > ~/.git-credentials
                        git config --global credential.helper 'store --file ~/.git-credentials'
                        """
                    }
                }
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: env.BRANCH_NAME]], // Замените 'main' на вашу ветку
                    userRemoteConfigs: [[
                        url: env.REPO_URL, // Укажите ваш репозиторий
                        credentialsId: env.GITHUB_CREDENTIALS_ID
                    ]]
                ])
            }
            
        }
        stage('Build Docker Image') {

            container('docker-id-prod'){
                script {
                    sh """
                    docker build . -f ${DOCKER_FILE} -t ${env.IMAGE_NAME}:${env.BUILD_TIMESTAMP}
                    """
                }

            }
            
        }

        stage('Tag Docker Image') {
            container('docker-id-prod'){
                script {
                    sh """
                    docker tag ${env.IMAGE_NAME}:${env.BUILD_TIMESTAMP} ${env.IMAGE_NAME}:latest
                    """
                }
                
            }
            
            
        }

        stage('Static Analysis') {
            parallel (

                'Lint Dockerfile': {
                    container('docker-id-prod'){

                        script {
                            sh '''
                            mkdir -p $REPORTS_DIR
                            docker run --rm -i hadolint/hadolint < Dockerfile | tee $REPORTS_DIR/hadolint_report.txt
                            '''
                        }

                    }
                },
                'Analyze Image with Dive': {

                    container('docker-id-prod'){
                        script {
                            sh '''
                            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock wagoodman/dive $IMAGE_NAME:latest --ci > $REPORTS_DIR/dive_report.txt || true
                            '''
                        }
                    }
                },
                'Scan for Vulnerabilities with Trivy':{
                    container('docker-id-prod'){

                        script {
                            sh '''
                            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):/workspace aquasec/trivy image --no-progress --format table -o /workspace/$REPORTS_DIR/trivy_report.txt $IMAGE_NAME:latest
                            '''
                        } 
                    }
                }
            )
        }

        stage('Archive Reports') {
            archiveArtifacts artifacts: 'reports/*', fingerprint: true
        }

        stage('Push to GHCR') {
            parallel (

                "build":{
                    container('docker-id-prod'){
                        script {
                            withCredentials([usernamePassword(credentialsId: env.GHCR_CREDENTIALS_ID, usernameVariable: 'GHCR_USER', passwordVariable: 'GHCR_TOKEN')]) {
                                sh """
                                echo "${GHCR_TOKEN}" | docker login ghcr.io -u "${GHCR_USER}" --password-stdin
                                docker push ${env.IMAGE_NAME}:${env.BUILD_TIMESTAMP}
                                """
                            }
                        }
                    }
                },
                "latest":{
                    container('docker-id-prod'){
                        script {
                            withCredentials([usernamePassword(credentialsId: env.GHCR_CREDENTIALS_ID, usernameVariable: 'GHCR_USER', passwordVariable: 'GHCR_TOKEN')]) {
                                sh """
                                echo "${GHCR_TOKEN}" | docker login ghcr.io -u "${GHCR_USER}" --password-stdin
                                docker push ${env.IMAGE_NAME}:latest
                                """
                            }
                        }
                    }
                }
            )
        }


        stage('Pull iup client') {
            container('docker-id-prod'){
                script {
                    withCredentials([usernamePassword(credentialsId: env.GHCR_CREDENTIALS_ID, usernameVariable: 'GHCR_USER', passwordVariable: 'GHCR_TOKEN')]) {
                        sh """
                        echo "${GHCR_TOKEN}" | docker login ghcr.io -u "${GHCR_USER}" --password-stdin
                        docker pull ghcr.io/frolovinr/python-image-updater-client:latest
                        """
                    }
                }
            }
        }

        stage('Run iup client') {
            container('docker-id-prod'){
                script {

                    withCredentials([
                        usernamePassword(credentialsId: env.GHCR_CREDENTIALS_ID, usernameVariable: 'GHCR_USER',passwordVariable: 'GHCR_TOKEN'),
                        string(credentialsId: 'chatid', variable: 'CHAT_ID')
                    ]) {
                        sh """
                    	docker run --rm \
                        -e BASE_API_URL=http://iup-service.iup.svc.cluster.local:8000 \
                        -e FILE_PATH=/app/devOps/infrastructure/swagger/deployment-gateway.yml \
                        -e NEW_IMAGE=${env.IMAGE_NAME}:${env.BUILD_TIMESTAMP} \
                        -e SERVICE_NAME=id \
                        -e CHAT_ID=${CHAT_ID} \
                        -e REPO_URL=github.com/frolovInR/devOps.git \
                        -e BRANCH=master \
                        -e ACCESS_TOKEN=${GHCR_TOKEN} \
                        ghcr.io/frolovinr/python-image-updater-client:latest
                        """
                    }
                }
            }
        }
    }
}